Binary Search
Sort the Array-
ascending-[2,4,9,10,12,14,18,19] or increasing
decending-[19,12,6,5,3,2,-8,-16] or decreasing{max comparison N: N=no. of element in Array}

     0 1 2 3  4   5  6  7  8  9 
arr=[2,4,6,9,{11},12,14,20,36,48] : 11 middle element : 2 start : 48 end = 0+9/2= 4
target=36

1.find the middle element mid=(s+e)/2= integer // s+e may exceed the int range if it is large value
// (s+e)/2 may exceed the int range if it is large value, so mid = start +  {(end-start)/2}
2.target>mid=>search in the right
else search in left
3.if middle element == target element//ans

->for search in left end= middle -1
->for search in left start= middle +1

if start>end // element not present in array

Best Case=Constant O(1) when target is middle element
Worst Case=TOTAL COMPARISON IS (LOG N) IGNORE Constant : O(logN) time complexity

N , N/2, N/2/2, N/2/2/2... N/2^K
N/2^K=1 LOG(N)=LOG(2^K)
LOG(N)=KLOG2
K=LOGN/LOG2 = LOG N BASE 2

SEARCH IN A 1000000 array
Linear Search | Binary Search
1 million       20 comparison only

ORDER AGNOSTIC BINARY SEARCH : When we don't know array is ascending or decending
we have to check start and end only this way we can concluded the given sorted array is ascending or decending
